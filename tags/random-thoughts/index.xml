<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>random-thoughts on</title><link>https://steelph0enix.github.io/tags/random-thoughts/</link><description>Recent content in random-thoughts on</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>SteelPh0enix's Blog © 2021 by SteelPh0enix is licensed under CC BY-SA 4.0</copyright><lastBuildDate>Tue, 14 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://steelph0enix.github.io/tags/random-thoughts/index.xml" rel="self" type="application/rss+xml"/><item><title>When should you choose C++ as your starting language?</title><link>https://steelph0enix.github.io/posts/choosing-first-language/</link><pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate><guid>https://steelph0enix.github.io/posts/choosing-first-language/</guid><description>When i&amp;rsquo;m lurking through the internet, i&amp;rsquo;m often seeing posts asking about &amp;ldquo;which language should i pick as a beginner???&amp;rdquo;. As someone who struggled a lot with this choice, and ultimately picked C++ (for reasons that made no real sense - but, of course, i didn&amp;rsquo;t knew that back then), i think i can say a few words about this specific choice and how it can affect the learning process of an individual.</description><content>&lt;p>When i&amp;rsquo;m lurking through the internet, i&amp;rsquo;m often seeing posts asking about &amp;ldquo;which language should i pick as a beginner???&amp;rdquo;. As someone who struggled a lot with this choice, and ultimately picked C++ (for reasons that made no real sense - but, of course, i didn&amp;rsquo;t knew that back then), i think i can say a few words about this specific choice and how it can affect the learning process of an individual.&lt;/p>
&lt;h2 id="its-a-trap">It&amp;rsquo;s a trap!&lt;/h2>
&lt;p>TL;DR of this post - it&amp;rsquo;s usually not a good idea to pick C++ as your starting language. After working with C++ for a long time, and tasting many different programming languages, i feel like C++ is a convoluted mess taped together using a subpar-quality duct tape, somehow still holding on, maybe even going in a relatively good direction with recent changes, but certainly not good enough for a beginner to learn the programming principles on at it&amp;rsquo;s current state.&lt;/p>
&lt;h2 id="why-would-you-even-want-to-do-that">Why would you even want to do that?&lt;/h2>
&lt;p>Excellent question! In most cases, i hear these specific arguments, trying very hard to justify picking C++ as a starter:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>It&amp;rsquo;s very fast!&lt;/strong> - very common misconception. &lt;strong>Languages are not inherently fast nor slow&lt;/strong>. Sure, some languages can be &lt;em>parsed&lt;/em> or &lt;em>interpreted&lt;/em>, faster than others, but it does not imply that the &lt;strong>program&lt;/strong> written in language A will &lt;em>always&lt;/em> be faster than program written in language B, or vice versa. Surely, that can be a thing - we absolutely can write a program in C++ that will be faster than equivalent program in Python or Java, but &lt;strong>it works both ways!&lt;/strong> A good practice is asking yourself &lt;em>&amp;ldquo;why?&amp;rdquo;&lt;/em> and &lt;em>&amp;ldquo;when?&amp;rdquo;.&lt;/em> Why program written in language &lt;code>A&lt;/code> may be faster/slower than equivalent program written in language &lt;code>B&lt;/code>? And at what scale does it become meaningful to the performance? But that&amp;rsquo;s not really something that a newbie should care about. Generally speaking, you should NOT care about &amp;ldquo;language performance&amp;rdquo; as a beginner, as it&amp;rsquo;s one of the last things you&amp;rsquo;ll have to worry about when learning programming. At the beginning, the real performance will lie mostly in data structures and algorithms used in your code, not the language choice.&lt;/li>
&lt;li>&lt;strong>Learning C++ teaches you low-level concepts, like pointers and manual memory management!&lt;/strong> - It can, but there&amp;rsquo;s a biiiiiig &lt;strong>but&lt;/strong>. &lt;strong>You don&amp;rsquo;t have to know these low-level concepts to write software and learn programming.&lt;/strong> Every day thousands of programmers write perfectly fine and working code without even knowing what pointer is, or how to manually manage the memory. It&amp;rsquo;s not something that you absolutely must know in order to write working code. It&amp;rsquo;s not something that may ever be useful for you. I certainly agree with people saying that knowing how pointers and manual memory management work can be useful in many situations, but for a beginner - it&amp;rsquo;s certainly not must-know, as even in C++ you usually don&amp;rsquo;t want to manually manage raw pointers and memory allocations.&lt;/li>
&lt;li>&lt;strong>Game programming is done in C++&lt;/strong> - usually paired with &amp;ldquo;much performance&amp;rdquo; argument - is also invalid, as there&amp;rsquo;s plenty of very popular game engines that provide much more newbie-friendly approach to game development. Check out &lt;a href="https://godotengine.org/">Godot&lt;/a> as one of the best examples, since it has both it&amp;rsquo;s own toolset that uses it&amp;rsquo;s own GDScript language, but also can be used with other languages and tools if you prefer that approach or you already know them and don&amp;rsquo;t want to learn new stuff. I know there&amp;rsquo;s plenty of people doing gamedev in C++, and they do have a point in that - being relatively close to the hardware it&amp;rsquo;s not the worst choice of a language, but i still strongly believe that it&amp;rsquo;s an overkill if you want to learn &lt;strong>&amp;ldquo;programming&amp;rdquo;&lt;/strong> and &lt;strong>&amp;ldquo;game development&amp;rdquo;&lt;/strong>, as it carries a heavy bag of &lt;strong>&amp;ldquo;having to learn C++&amp;rdquo;&lt;/strong> before learning the stuff you really wanna learn. Don&amp;rsquo;t forget that, if you&amp;rsquo;re thinking that it&amp;rsquo;ll be a breeze and something you&amp;rsquo;ll do &amp;ldquo;on the side&amp;rdquo; - &lt;em>you may lack some crucial knowledge&lt;/em>. Of course, if you wanna do it &amp;ldquo;raw&amp;rdquo; and really refuse to use existing game engines, you absolutely can do it in any language that has &lt;em>some&lt;/em> kind of multimedia API&amp;hellip; so, basically, most available and popular languages for sane people (brainfuck btfo). If you don&amp;rsquo;t believe me, &lt;a href="https://store.steampowered.com/app/824600/HROT/">this game was written in Pascal, from scratch, in 2017. And it runs great!&lt;/a>&lt;/li>
&lt;li>&lt;strong>I know some C, so C++ is just an extension, so i&amp;rsquo;ll learn it&lt;/strong> - it is not, and thinking that will force you onto a path from which it&amp;rsquo;s very hard to return, as i have witnessed multiple times with my own eyes. Beware of thinking about C++ like an addition to C, as it&amp;rsquo;s just as foolish as thinking about a dragon being an addition to his precious mountain of gold. &lt;a href="https://en.cppreference.com/w/cpp/language/initialization">You WILL get burned&lt;/a>. &lt;a href="https://en.cppreference.com/w/cpp/language/lifetime">You WILL witness horrors beyond your comprehension&lt;/a>. &lt;a href="https://en.cppreference.com/w/cpp/language/value_category">That last part is also true when talking about C++ in general&lt;/a>. Compare the following articles with their C counterparts (link is on the bottom of the reference page) and rethink your life choices.&lt;/li>
&lt;/ul>
&lt;p>That list may become longer with time.&lt;/p>
&lt;h2 id="so-what-are-the-alternatives">So, what are the alternatives?&lt;/h2>
&lt;p>Another excellent question! Loving the audience today.&lt;/p>
&lt;p>Obviously i will have to answer according to my own opinions and beliefs, however, i will also try to explain why do i think like i think i think. I think that will make it easier to, at least, continue your research. Remember - t̴h̴e̶ ̷r̷e̵s̷e̴a̸r̸c̴h̸ ̸n̷e̷v̸e̷r̷ ̷e̵n̵d̴s̸.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Python&lt;/strong> - some people will tell you that Python sucks. Some people will tell you that Python is not a good language for beginners. Some people are wrong and cannot comprehend the simplicity and beauty of whitespace-defined syntax. I, however, will tell you that i love Python because it rarely disappoints me. I need to write a simple tool that does some stuff automatically, and i want it to work everywhere? Python is my guy. It&amp;rsquo;s long support, big community, package manager and existing tools are making it very hard for me to not recommend this language as a starter. Syntax is sure &lt;em>very specific&lt;/em>, some might even say &lt;em>exotic&lt;/em>, but after working with it for a while it annoys me only &lt;em>sometimes&lt;/em> when i have to move a block of code to a different place and manually fix every indentation. And it even has type hints and easy-to-use tools that&amp;rsquo;ll make sure you adhere to typing rules, which some people may find very useful. For a beginner though, you&amp;rsquo;ll most likely want to focus on the vast &lt;a href="https://pypi.org/">PyPI&lt;/a> repository to write some useful stuff for yourself. It&amp;rsquo;s &lt;a href="https://docs.python.org/3/index.html">documentation&lt;/a> is also relatively decent and even has a tutorial to get you started, but if you&amp;rsquo;re completely new to IT and/or programming world i&amp;rsquo;d recommend to look for a first-time tutorial more suited to your level of knowledge, as the &amp;ldquo;official&amp;rdquo; one is not very newbie-oriented.&lt;/li>
&lt;li>&lt;strong>JavaScript&lt;/strong> (or maybe even &lt;strong>TypeScript?&lt;/strong>) - It&amp;rsquo;s a very simple gateway to vast world of web applications, but not only, as you can plug JavaScript almost anywhere nowadays&amp;hellip; I&amp;rsquo;m personally not a fan of this language, but from what i&amp;rsquo;ve seen - people who start from JavaScript have certain &amp;ldquo;freedom&amp;rdquo; of being able to use this language anywhere they want, which is nice if you don&amp;rsquo;t know what you exactly want to do yet, but usually comes with additional baggage of tools for creating user interfaces - HTML and CSS being the usual ones, but most likely also paired with some fancy frameworks and other funky stuff that - according to many web developers - are needed to write functional pages, for which &lt;a href="https://htmx.org/">more elegant technologies from simpler times&lt;/a> may be more than enough). I&amp;rsquo;m getting out of topic though, i endorse JavaScript as a starter definitely more than i endorse C++, but be aware of many pitfalls this language comes with. &lt;em>Which can be said about basically any language, but the Big Dev won&amp;rsquo;t tell you about it!&lt;/em>&lt;/li>
&lt;li>&lt;strong>Kotlin&lt;/strong> - If you want to learn Java for whatever god-forsaken reason you may have, don&amp;rsquo;t learn Java - learn Kotlin instead! If you wanna make Android apps and you&amp;rsquo;d rather use official tools than some webdev mumbo-jumbo, Kotlin is your guy! It&amp;rsquo;s Java legacy makes it a reasonably good starting language, as you have both a nice, modern language with nice, modern syntax and useful features that are simply joy to work with, and a vast repository of libraries, some written long before Kotlin even existed. I haven&amp;rsquo;t worked much with this language, but i enjoyed almost every moment of it.&lt;/li>
&lt;li>&lt;strong>C&lt;/strong> - yeah, let&amp;rsquo;s put it on the list, why not. &lt;strong>You wanna have a very close relationship with your hardware? Here&amp;rsquo;s your language. Don&amp;rsquo;t tell me i didn&amp;rsquo;t warn you though.&lt;/strong>
&lt;img src="https://steelph0enix.github.io/img/this_machine_does_not_know_the_difference.png" alt="don&amp;#39;t say i didn&amp;#39;t warn you" class="center" />
In all fairness, C is certainly lacking - real generics, for example, but that doesn&amp;rsquo;t stop people from using it even right now. As a language to get hang of programming and &amp;ldquo;how does stuff work under the hood&amp;rdquo; it&amp;rsquo;s a great choice, as a language to write working applications without having to create a whole universe beforehand&amp;hellip; not so much, unless you work on something that does not require an entire universe to run, but i will get to it soon - i promise.&lt;/li>
&lt;/ul>
&lt;p>This list is by no means comprehensive. There&amp;rsquo;s a lot of languages that are deemed being &amp;ldquo;reasonable for beginners&amp;rdquo; that are not on this list, just because i either never worked with them, or worked so long ago that i cannot assume that my knowledge is still applicable to it&amp;rsquo;s current state (for example - C#, which i&amp;rsquo;d like to say something about, but i really can&amp;rsquo;t).&lt;/p>
&lt;p>Notice that my focus here is to recommend a language that will be relatively easy to learn and easy to use, with big community and lots of resources to learn from - C++ is lacking in many of these aspects, which makes learning modern C++ the &amp;ldquo;correct&amp;rdquo; way surprisingly hard. And, to be fair, it makes doing &lt;em>anything&lt;/em> in C++ unreasonably convoluted and painful. Ever tried to setup a C++ project from scratch with automatic unit and integration tests? I did. And failed. Not because it&amp;rsquo;s impossible, but because i simply rather choose a language which supports that stuff out-of-the-box (unit testing, at least). And i&amp;rsquo;ve seen projects that do have this stuff in C++, and i&amp;hellip; uhh&amp;hellip; i&amp;rsquo;d rather avoid having to jump through the hoops of CMake and similar tools in order to have stuff that&amp;rsquo;s relatively easy to do in other languages &lt;em>usually without having to learn how to use 3rd party tools&lt;/em>. And there&amp;rsquo;s C, as a direct C++ alternative, and i&amp;rsquo;ll explain why it&amp;rsquo;s here - because it&amp;rsquo;s certainly not for the same reason as other languages on this list.&lt;/p>
&lt;h2 id="when-it-actually-makes-sense-to-go-c-head-first">When it actually makes sense to go C++ head-first&lt;/h2>
&lt;p>As with any rules, there are exceptions, and this includes my &amp;ldquo;No C++ for beginners allowed&amp;rdquo; rule.&lt;/p>
&lt;p>The most obvious exception for me is targeting embedded programming as &lt;em>the thing you want to do&lt;/em>. And it&amp;rsquo;s also the reason why C is on my list - because C is &lt;em>much&lt;/em> simpler than C++, it might be a better idea to start with that instead. But if you wanna use Arduino, like most beginners nowadays, sticking only to C makes little sense as there are powerful and relatively easy-to-use features of C++ that you already have access to (and might have to use, depending on the libraries you work with). Sure, you may not have the standard library and it&amp;rsquo;s fancy features &lt;em>(and i&amp;rsquo;d argue that it&amp;rsquo;s a good thing)&lt;/em>, but you still have the power of templates, lambda expressions, constexpr, and many more cool features. So yeah, if you wanna tinker with hardware then learning C++ &lt;em>might&lt;/em> be unavoidable for you.&lt;/p>
&lt;p>But only &lt;em>might&lt;/em> - if you ignore the existence of Arduino framework - not the hardware, the hardware is it&amp;rsquo;s own thing and it&amp;rsquo;s just a &amp;ldquo;brand&amp;rdquo; name - you may just stick to pure C and write the code from scratch directly for the microcontroller you have, or using vendor-provided tools (like STM32CubeIDE for ST microcontrollers). However, this is substantially harder as it usually requires you to actually read the documentation of hardware you&amp;rsquo;re working on. It&amp;rsquo;s really not something for faint-hearted developers that would rather stick to copy&amp;amp;pasting random pieces of code from the internet or ChatGPT, with hope that it&amp;rsquo;ll solve all their issues.&lt;/p>
&lt;p>Another obvious scenario is &amp;ldquo;you have to learn it because of school/university/work/side-project i&amp;rsquo;m doing with some C++ developers&amp;rdquo;. Or you may just be a very, very, very fiercely and weirdly focused on learning C++. For that, i have no cure. I just have a tip - &lt;em>try to stick to modern sources and don&amp;rsquo;t get sucked by outdated, pre-C++11 tutorials and books that have questionable reputation&lt;/em>. There&amp;rsquo;s many. &lt;a href="https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list/">There are curated lists of sources from which you can start your journey&lt;/a>.&lt;/p>
&lt;p>And i can&amp;rsquo;t really think about any other scenarios where C++ would &lt;em>really&lt;/em> make sense. Some time ago i&amp;rsquo;d say that OS-dev is a good niche for that, but you can do OS-dev in C as well, and there&amp;rsquo;s Rust for the cool kids that sit on the back of the bus - much saner choice than C++ if you ask me. Borrow checker may go hard, but &lt;em>it&amp;rsquo;s there and will never leave you&lt;/em>. You want the same commitment from C or C++? Configure it yourself. And it won&amp;rsquo;t be half as good as what Rust does for your code. Graphics programming and game development? Yea, sure, maybe. Maybe if you are new in this world, still with hopes for a better tomorrow, still young and innocent, it will sound like a good choice - and you may even walk through this path relatively unscathed. But then again, you may not. I&amp;rsquo;d still look at alternatives first, &lt;em>just because lots of people do it in C++, doesn&amp;rsquo;t mean that you have to do it in C++ too&lt;/em>.&lt;/p>
&lt;p>I may sound like a big C++ hater, but to be honest - it earned it. I&amp;rsquo;ve spent years with that language, and half of this time i&amp;rsquo;ve spent fighting with it - do i regret it? I regret not jumping this ship earlier, but i&amp;rsquo;d say that lots of things i&amp;rsquo;ve learned via C++ i&amp;rsquo;ve found useful at some point. Could i learn those things while focusing on different languages? Some of them, yes, but not all of them. Would i go different path if i could start my journey again? Fuck yes, i&amp;rsquo;d jump straight to Python or webdev, but considering my areas of interests and expertise i&amp;rsquo;d end up with C++ at some point anyway.&lt;/p>
&lt;p>I&amp;rsquo;m also not saying that C++ should &lt;em>never&lt;/em> be learned or used. It&amp;rsquo;s got it&amp;rsquo;s things going, and with certain amount of experience in general programming and with setting up software projects, it&amp;rsquo;s possible to work with it. But you need that experience and knowledge first, and head-slamming into a C++ wall may not help you get that knowledge in comparison with other available methods.&lt;/p></content></item></channel></rss>